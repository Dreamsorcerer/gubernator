"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file

Copyright 2018-2022 Mailgun Technologies Inc

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
import abc
import grpc
from gubernator import peers_pb2

class PeersV1Stub:
    """NOTE: For use by gubernator peers only"""

    def __init__(self, channel: grpc.Channel) -> None: ...
    GetPeerRateLimits: grpc.UnaryUnaryMultiCallable[
        peers_pb2.GetPeerRateLimitsReq,
        peers_pb2.GetPeerRateLimitsResp,
    ]
    """Used by peers to relay batches of requests to an authoritative peer"""
    UpdatePeerGlobals: grpc.UnaryUnaryMultiCallable[
        peers_pb2.UpdatePeerGlobalsReq,
        peers_pb2.UpdatePeerGlobalsResp,
    ]
    """Used by peers send global rate limit updates to other peers"""

class PeersV1Servicer(metaclass=abc.ABCMeta):
    """NOTE: For use by gubernator peers only"""

    @abc.abstractmethod
    def GetPeerRateLimits(
        self,
        request: peers_pb2.GetPeerRateLimitsReq,
        context: grpc.ServicerContext,
    ) -> peers_pb2.GetPeerRateLimitsResp:
        """Used by peers to relay batches of requests to an authoritative peer"""
    @abc.abstractmethod
    def UpdatePeerGlobals(
        self,
        request: peers_pb2.UpdatePeerGlobalsReq,
        context: grpc.ServicerContext,
    ) -> peers_pb2.UpdatePeerGlobalsResp:
        """Used by peers send global rate limit updates to other peers"""

def add_PeersV1Servicer_to_server(servicer: PeersV1Servicer, server: grpc.Server) -> None: ...
